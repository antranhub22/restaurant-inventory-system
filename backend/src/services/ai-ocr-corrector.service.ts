import logger from './logger.service';
import axios from 'axios';

interface AIProvider {
  name: string;
  apiKey: string;
  endpoint: string;
  model: string;
}

interface OCRCorrectionResult {
  correctedText: string;
  corrections: Array<{
    original: string;
    corrected: string;
    confidence: number;
    reason: string;
  }>;
  confidence: number;
  provider: string;
}

class AIOcrCorrectorService {
  private providers: AIProvider[] = [];

  constructor() {
    this.initializeProviders();
  }

  private initializeProviders() {
    // OpenAI provider
    if (process.env.OPENAI_API_KEY) {
      this.providers.push({
        name: 'openai',
        apiKey: process.env.OPENAI_API_KEY,
        endpoint: 'https://api.openai.com/v1/chat/completions',
        model: 'gpt-4o-mini'
      });
    }

    // DeepSeek provider  
    if (process.env.DEEPSEEK_API_KEY) {
      this.providers.push({
        name: 'deepseek',
        apiKey: process.env.DEEPSEEK_API_KEY,
        endpoint: 'https://api.deepseek.com/v1/chat/completions',
        model: 'deepseek-chat'
      });
    }

    logger.info(`ü§ñ AI OCR Corrector initialized with ${this.providers.length} providers`);
  }

  public hasProvider(): boolean {
    return this.providers.length > 0;
  }

  /**
   * Correct OCR errors using AI with Vietnamese restaurant context
   */
  public async correctOCRErrors(rawOcrText: string, context?: any): Promise<OCRCorrectionResult> {
    if (!this.hasProvider()) {
      logger.warn('‚ö†Ô∏è No AI provider available for OCR correction');
      return {
        correctedText: rawOcrText,
        corrections: [],
        confidence: 0.5,
        provider: 'none'
      };
    }

    for (const provider of this.providers) {
      try {
        logger.info(`ü§ñ Attempting OCR correction with ${provider.name}...`);
        const result = await this.correctWithProvider(provider, rawOcrText, context);
        logger.info(`‚úÖ OCR correction successful with ${provider.name}`);
        return result;
      } catch (error) {
        logger.warn(`‚ö†Ô∏è OCR correction failed with ${provider.name}:`, error);
        continue;
      }
    }

    // Fallback: return original text if all providers fail
    logger.error('‚ùå All AI providers failed for OCR correction');
    return {
      correctedText: rawOcrText,
      corrections: [],
      confidence: 0.3,
      provider: 'fallback'
    };
  }

  private async correctWithProvider(
    provider: AIProvider, 
    rawText: string, 
    context?: any
  ): Promise<OCRCorrectionResult> {
    const systemPrompt = `B·∫°n l√† chuy√™n gia s·ª≠a l·ªói OCR cho h√≥a ƒë∆°n nh√† h√†ng Vi·ªát Nam. 

NHI·ªÜM V·ª§: S·ª≠a l·ªói OCR v√† tr·∫£ v·ªÅ JSON v·ªõi format ch√≠nh x√°c.

NGUY√äN T·∫ÆC S·ª¨A L·ªñI:
1. T√™n m√≥n ƒÉn Vi·ªát Nam ph·ªï bi·∫øn:
   - "Nedngot" ‚Üí "Ng√¥ ng·ªçt"
   - "Giad" ‚Üí "Gi√° ƒë·ªó" 
   - "cart" ‚Üí "C√† r√≥t"
   - "Ca chua" ‚Üí "C√° chua"
   - "Rau muong" ‚Üí "Rau mu·ªëng"
   - "Cai ngot" ‚Üí "C·∫£i ng·ªçt"
   - "Hanh la" ‚Üí "H√†nh l√°"
   - "La lot" ‚Üí "L√° l√≥t"
   - "Nam bo" ‚Üí "Nam b√≤"

2. C√°c l·ªói OCR th∆∞·ªùng g·∫∑p:
   - Ch·ªØ "√¥" th√†nh "o" ho·∫∑c "0"
   - Ch·ªØ "∆∞" th√†nh "u"
   - Ch·ªØ "ƒÉ" th√†nh "a"
   - Ch·ªØ "ƒë" th√†nh "d"
   - S·ªë "0" th√†nh "o" ho·∫∑c "O"

3. Context m√≥n ƒÉn nh√† h√†ng:
   - Rau c·ªß: C√† chua, Ng√¥ ng·ªçt, Rau mu·ªëng, C·∫£i ng·ªçt, H√†nh l√°, Gi√° ƒë·ªó, L√° l√≥t, C√† r√≥t
   - Th·ªãt c√°: Nam b√≤, C√° r√¥, Th·ªãt heo, G√†
   - Gia v·ªã: Mu·ªëi, ƒê∆∞·ªùng, N∆∞·ªõc m·∫Øm, D·∫ßu ƒÉn

RESPONSE FORMAT (JSON):
{
  "correctedText": "text ƒë√£ ƒë∆∞·ª£c s·ª≠a",
  "corrections": [
    {
      "original": "text l·ªói",
      "corrected": "text ƒë√£ s·ª≠a", 
      "confidence": 0.95,
      "reason": "l√Ω do s·ª≠a"
    }
  ],
  "confidence": 0.9
}`;

    const userPrompt = `OCR Text c·∫ßn s·ª≠a:
"""
${rawText}
"""

Context th√™m:
- ƒê√¢y l√† phi·∫øu nh·∫≠p kho nh√† h√†ng
- C√≥ th·ªÉ ch·ª©a b·∫£ng v·ªõi: STT | T√™n h√†ng | ƒêVT | S·ªë l∆∞·ª£ng | ƒê∆°n gi√° | Th√†nh ti·ªÅn
- T·ªïng ti·ªÅn th∆∞·ªùng ·ªü cu·ªëi
- Ng√†y th√°ng format: DD/MM/YYYY

H√£y s·ª≠a l·ªói OCR v√† tr·∫£ v·ªÅ JSON.`;

    const response = await axios.post(
      provider.endpoint,
      {
        model: provider.model,
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        temperature: 0.1,
        max_tokens: 2000,
        response_format: { type: 'json_object' }
      },
      {
        headers: {
          'Authorization': `Bearer ${provider.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000
      }
    );

    const aiResponse = response.data.choices[0].message.content;
    const parsedResult = JSON.parse(aiResponse);

    return {
      correctedText: parsedResult.correctedText || rawText,
      corrections: parsedResult.corrections || [],
      confidence: parsedResult.confidence || 0.8,
      provider: provider.name
    };
  }

  /**
   * Quick corrections without AI for common Vietnamese OCR errors
   */
  public applyQuickCorrections(text: string): {
    correctedText: string;
    corrections: Array<{ original: string; corrected: string; }>;
  } {
    const corrections: Array<{ original: string; corrected: string; }> = [];
    let correctedText = text;

    // Common Vietnamese food name corrections
    const vietnameseFoodCorrections = [
      // Common OCR mistakes for Vietnamese food names
      ['Nedngot', 'Ng√¥ ng·ªçt'],
      ['nedngot', 'ng√¥ ng·ªçt'], 
      ['Giad', 'Gi√° ƒë·ªó'],
      ['giad', 'gi√° ƒë·ªó'],
      ['cart', 'C√† r√≥t'],
      ['Cart', 'C√† r√≥t'],
      ['Ca chua', 'C√° chua'],
      ['ca chua', 'c√° chua'],
      ['Rau muong', 'Rau mu·ªëng'],
      ['rau muong', 'rau mu·ªëng'],
      ['Cai ngot', 'C·∫£i ng·ªçt'],
      ['cai ngot', 'c·∫£i ng·ªçt'],
      ['Hanh la', 'H√†nh l√°'],
      ['hanh la', 'h√†nh l√°'],
      ['La lot', 'L√° l√≥t'],
      ['la lot', 'l√° l√≥t'],
      ['Nam bo', 'Nam b√≤'],
      ['nam bo', 'nam b√≤'],
      
      // Character-level corrections
      ['Ngo ngot', 'Ng√¥ ng·ªçt'],
      ['ngo ngot', 'ng√¥ ng·ªçt'],
      ['Gia do', 'Gi√° ƒë·ªó'],
      ['gia do', 'gi√° ƒë·ªó'],
      ['Ca rot', 'C√† r√≥t'],
      ['ca rot', 'c√† r√≥t'],
      
      // Common OCR character mistakes
      ['o ', '√¥ '],
      ['u ', '∆∞ '],
      ['a ', 'ƒÉ '],
      ['d ', 'ƒë '],
      
      // Number corrections in Vietnamese context
      ['0OO', '000'],
      ['O00', '000'],
      ['OOO', '000']
    ];

    vietnameseFoodCorrections.forEach(([wrong, correct]) => {
      if (correctedText.includes(wrong)) {
        correctedText = correctedText.replace(new RegExp(wrong, 'g'), correct);
        corrections.push({ original: wrong, corrected: correct });
      }
    });

    return {
      correctedText,
      corrections
    };
  }
}

export default new AIOcrCorrectorService(); 