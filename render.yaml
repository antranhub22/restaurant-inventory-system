services:
  # PostgreSQL Database Service
  - type: pserv
    name: restaurant-inventory-database
    plan: starter # hoặc free
    region: singapore
    env: 
      - key: POSTGRES_DB
        value: restaurant_inventory
      - key: POSTGRES_USER
        value: restaurant_user

  # Backend API Service
  - type: web
    name: restaurant-inventory-backend
    runtime: node
    plan: starter # hoặc free
    region: singapore # gần Việt Nam
    buildCommand: ./render-build.sh
    startCommand: cd backend && ./render-start.sh
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 4000
      - key: DATABASE_URL
        fromDatabase:
          name: restaurant-inventory-database
          property: connectionString
      - key: JWT_SECRET
        generateValue: true # Render tự generate
      - key: REDIS_URL
        sync: false # Optional - từ Redis provider
      - key: FRONTEND_URL
        value: https://restaurant-inventory-frontend.onrender.com
    healthCheckPath: /api/health
    autoDeploy: true

  # Frontend Static Site
  - type: web
    name: restaurant-inventory-frontend
    runtime: static
    buildCommand: cd frontend && ./render-build.sh
    staticPublishPath: ./frontend/dist
    headers:
      - path: /*
        name: X-Frame-Options
        value: DENY
      - path: /*
        name: X-Content-Type-Options
        value: nosniff
      - path: /*
        name: X-XSS-Protection
        value: 1; mode=block
    routes:
      - type: rewrite
        source: /*
        destination: /index.html
    envVars:
      - key: VITE_API_URL
        value: https://restaurant-inventory-backend.onrender.com/api
      - key: VITE_ENV
        value: production
    autoDeploy: true

# HƯỚNG DẪN SETUP DATABASE VỚI RENDER POSTGRESQL:
# 1. PostgreSQL service sẽ được tự động tạo từ file này
# 2. DATABASE_URL sẽ được tự động cấu hình từ PostgreSQL service
# 3. Render tự động thêm SSL cho PostgreSQL connections
# 4. Database migration sẽ tự động chạy trong build process
#
# ENTRY POINT CONFIGURATION:
# - Backend sử dụng Node.js runtime với ./render-build.sh
# - Entry point: index.js (redirect to backend/dist/server.js)
# - Fallback: backend/index.js với tsx (nếu build fail)
# - Health check: /api/health endpoint
#
# LỖI ĐÃ SỬA:
# - MODULE_NOT_FOUND: Fixed với root-level index.js
# - Build fails: Enhanced build script với verification
# - Database connection: Retry logic trong server startup
# - TypeScript issues: Fallback sang tsx execution
#
# OPTIONAL: REDIS
# Sử dụng Redis Cloud (redis.com) hoặc Upstash (upstash.com)
# Copy REDIS_URL và paste vào Render environment variables
#
# LƯU Ý:
# - PostgreSQL service format: postgresql://user:pass@host:port/database?sslmode=require
# - Internal Render connections sử dụng private network
# - Database cần time để khởi động (~2-3 phút cho lần đầu)
# - Backend có comprehensive error handling và fallback mechanisms 
# - Root-level index.js handles entry point redirection 