import { createWorker } from 'tesseract.js';

export interface OcrResult {
  rawText: string;           // To√†n b·ªô text tr√≠ch xu·∫•t ƒë∆∞·ª£c
  confidence: number;        // ƒê·ªô tin c·∫≠y trung b√¨nh
  wordCount: number;         // S·ªë t·ª´ ƒë√£ tr√≠ch xu·∫•t
  processingTime: number;    // Th·ªùi gian x·ª≠ l√Ω (ms)
}

class OcrService {
  private async extractTextFromImage(imageBuffer: Buffer): Promise<{
    text: string;
    confidence: number;
  }> {
    const startTime = Date.now();
    
    try {
      console.log('üîç B·∫Øt ƒë·∫ßu x·ª≠ l√Ω OCR v·ªõi Tesseract...');
      console.log('üìä K√≠ch th∆∞·ªõc ·∫£nh:', imageBuffer.length, 'bytes');

      // Kh·ªüi t·∫°o worker v·ªõi Tesseract.js
      console.log('üìö ƒêang kh·ªüi t·∫°o Tesseract worker...');
      const worker = await createWorker('vie+eng', 1, {
        logger: (m: any) => {
          if (m.status) {
            console.log(`Tesseract: ${m.status}${m.progress ? ` (${Math.round(m.progress * 100)}%)` : ''}`);
          }
        }
      });

      // Nh·∫≠n d·∫°ng text
      console.log('üîç ƒêang x·ª≠ l√Ω OCR...');
      const { data } = await worker.recognize(imageBuffer);
      
      await worker.terminate();

      const processingTime = Date.now() - startTime;

      console.log(`\n‚ú® Ho√†n th√†nh OCR:`);
      console.log(`- Text tr√≠ch xu·∫•t: ${data.text.substring(0, 100)}...`);
      console.log(`- ƒê·ªô tin c·∫≠y: ${data.confidence}%`);
      console.log(`- Th·ªùi gian x·ª≠ l√Ω: ${processingTime}ms`);
      
      return {
        text: data.text,
        confidence: data.confidence / 100
      };
    } catch (error: any) {
      console.error('‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω OCR:', error);
      throw new Error(`L·ªói khi x·ª≠ l√Ω OCR: ${error.message || 'Unknown error'}`);
    }
  }

  public async processReceipt(imageBuffer: Buffer): Promise<OcrResult> {
    const startTime = Date.now();
    const { text, confidence } = await this.extractTextFromImage(imageBuffer);
    
    // ƒê·∫øm s·ªë t·ª´
    const wordCount = text.trim().split(/\s+/).filter(word => word.length > 0).length;
    
    return {
      rawText: text,
      confidence,
      wordCount,
      processingTime: Date.now() - startTime
    };
  }
}

export default new OcrService(); 