services:
  # Backend API Service
  - type: web
    name: restaurant-inventory-backend
    runtime: node
    plan: starter # ho·∫∑c free
    region: oregon # Match v·ªõi database region (US West)
    buildCommand: cd backend && npm ci && npx prisma generate && npx tsc && cp -r prisma dist/
    startCommand: cd backend && echo "üöÄ STARTING INLINE..." && ls -la && echo "Schema check:" && ls -la prisma/ && echo "Dist check:" && ls -la dist/ && if [ -f "dist/prisma/schema.prisma" ]; then echo "Found schema in dist, copying..." && mkdir -p prisma && cp -r dist/prisma/* prisma/ 2>/dev/null || true; fi && echo "Generating client..." && npx prisma generate && echo "Running migrations..." && (npx prisma migrate deploy || npx prisma db push --accept-data-loss || echo "Migration failed but continuing") && echo "Starting server..." && node dist/server.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 4000
      - key: DATABASE_URL
        value: postgresql://restaurantinventory_user:I1IzTmtKbqZ0rkZTo4HtMDJtJvcoMV7q@dpg-d1sf2ajulbrs73ac9r30-a.oregon-postgres.render.com/restaurantinventory
      - key: JWT_SECRET
        generateValue: true # Render t·ª± generate
      - key: REDIS_URL
        sync: false # Optional - t·ª´ Redis provider
      - key: FRONTEND_URL
        value: https://restaurant-inventory-frontend.onrender.com
    healthCheckPath: /api/health
    autoDeploy: true

  # Frontend Static Site
  - type: web
    name: restaurant-inventory-frontend
    runtime: static
    buildCommand: cd frontend && ./render-build.sh
    staticPublishPath: ./frontend/dist
    headers:
      - path: /*
        name: X-Frame-Options
        value: DENY
      - path: /*
        name: X-Content-Type-Options
        value: nosniff
      - path: /*
        name: X-XSS-Protection
        value: 1; mode=block
    routes:
      - type: rewrite
        source: /*
        destination: /index.html
    envVars:
      - key: VITE_API_URL
        value: https://restaurant-inventory-backend.onrender.com/api
      - key: VITE_ENV
        value: production
    autoDeploy: true

# H∆Ø·ªöNG D·∫™N SETUP DATABASE V·ªöI RENDER POSTGRESQL:
# 1. S·ª≠ d·ª•ng existing PostgreSQL database: restaurantinventory
# 2. DATABASE_URL ƒë∆∞·ª£c hard-coded v·ªõi connection string t·ª´ existing database
# 3. Database region: Oregon (US West) - Backend c≈©ng deploy t·∫°i Oregon
# 4. Database migration s·∫Ω t·ª± ƒë·ªông ch·∫°y trong build process
#
# ENTRY POINT CONFIGURATION:
# - Backend s·ª≠ d·ª•ng Node.js runtime v·ªõi ./render-build.sh
# - Entry point: index.js (redirect to backend/dist/server.js)
# - Fallback: backend/index.js v·ªõi tsx (n·∫øu build fail)
# - Health check: /api/health endpoint
#
# L·ªñI ƒê√É S·ª¨A:
# - MODULE_NOT_FOUND: Fixed v·ªõi root-level index.js
# - Build fails: Enhanced build script v·ªõi verification
# - Database connection: Retry logic trong server startup
# - TypeScript issues: Fallback sang tsx execution
#
# OPTIONAL: REDIS
# S·ª≠ d·ª•ng Redis Cloud (redis.com) ho·∫∑c Upstash (upstash.com)
# Copy REDIS_URL v√† paste v√†o Render environment variables
#
# L∆ØU √ù:
# - S·ª≠ d·ª•ng existing database: restaurantinventory t·∫°i Oregon region
# - Database connection string ƒë√£ include SSL mode
# - Backend v√† database c√πng region Oregon ƒë·ªÉ optimize latency
# - Backend c√≥ comprehensive error handling v√† fallback mechanisms 
# - Root-level index.js handles entry point redirection
# - Database ƒë√£ s·∫µn s√†ng, kh√¥ng c·∫ßn th·ªùi gian kh·ªüi ƒë·ªông 