import { createWorker } from 'tesseract.js';
import { PrismaClient } from '@prisma/client';
import vietnameseService from './vietnamese.service';
import ocrLearningService from './ocr.learning.service';

const prisma = new PrismaClient();

interface ReceiptSection {
  header: TextBlock[];    // Th√¥ng tin nh√† cung c·∫•p, ng√†y
  items: TextBlock[];     // Danh s√°ch s·∫£n ph·∫©m
  summary: TextBlock[];   // T·ªïng ti·ªÅn, thu·∫ø, etc.
}

interface ReceiptItem {
  name: string;
  quantity: number;
  unitPrice: number;
  total: number;
  confidence: number;
}

export interface OcrResult {
  supplier: string;
  date: string;
  total: number;
  items: Array<{
    name: string;
    quantity: number;
    unit_price: number;
    total: number;
    confidence: number;
  }>;
  confidence: number;
  needsReview: boolean;
}

interface TextBlock {
  text: string;
  confidence: number;
  boundingBox: {
    left: number;
    top: number;
    right: number;
    bottom: number;
  };
}

class OcrService {
  private static readonly MIN_CONFIDENCE_SCORE = 0.5; // Gi·∫£m threshold ƒë·ªÉ test
  private static readonly MIN_ITEM_MATCH_SCORE = 0.85;
  private static readonly REVIEW_THRESHOLD = 0.9;

  private async extractTextFromImage(imageBuffer: Buffer): Promise<TextBlock[]> {
    try {
      console.log('üîç B·∫Øt ƒë·∫ßu x·ª≠ l√Ω OCR v·ªõi Tesseract...');
      console.log('üìä K√≠ch th∆∞·ªõc ·∫£nh:', imageBuffer.length, 'bytes');

      // Kh·ªüi t·∫°o worker v·ªõi Tesseract.js v6
      console.log('üìö ƒêang kh·ªüi t·∫°o Tesseract worker...');
      const worker = await createWorker('vie+eng', 1, {
        logger: (m: any) => {
          if (m.status) {
            console.log(`Tesseract: ${m.status}${m.progress ? ` (${Math.round(m.progress * 100)}%)` : ''}`);
          }
        }
      });

      // Nh·∫≠n d·∫°ng text
      console.log('üîç ƒêang x·ª≠ l√Ω OCR...');
      const { data } = await worker.recognize(imageBuffer);
      
      if (!data || !data.text) {
        console.error('‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ t·ª´ Tesseract');
        await worker.terminate();
        return [];
      }

      console.log('üìù Text nh·∫≠n d·∫°ng ƒë∆∞·ª£c:', data.text.substring(0, 200) + '...');
      
      const textBlocks: TextBlock[] = [];
      
      // X·ª≠ l√Ω t·ª´ng d√≤ng text
      const lines = data.text.split('\n');
      const avgConfidence = data.confidence || 85;
      
      lines.forEach((line: string, index: number) => {
        const trimmedLine = line.trim();
        if (trimmedLine) {
          const lineConfidence = this.calculateLineConfidence(trimmedLine, avgConfidence);
          
          textBlocks.push({
            text: trimmedLine,
            confidence: lineConfidence,
            boundingBox: {
              left: 0,
              top: index * 20,
              right: 1000,
              bottom: (index + 1) * 20
            }
          });
        }
      });

      await worker.terminate();
      
      const filteredBlocks = textBlocks.filter(block => 
        block.confidence >= OcrService.MIN_CONFIDENCE_SCORE
      );
      
      console.log(`\n‚ú® K·∫øt qu·∫£ OCR: ${filteredBlocks.length} d√≤ng text`);
      filteredBlocks.slice(0, 5).forEach(block => {
        console.log(`- "${block.text}" (${(block.confidence * 100).toFixed(1)}%)`);
      });
      
      return filteredBlocks;
    } catch (error: any) {
      console.error('‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω OCR:', error);
      console.error('Chi ti·∫øt l·ªói:', error.message || error);
      console.error('Stack trace:', error.stack);
      
      throw new Error(`L·ªói khi x·ª≠ l√Ω OCR: ${error.message || 'Unknown error'}`);
    }
  }

  private analyzeStructure(blocks: TextBlock[]): ReceiptSection {
    // S·∫Øp x·∫øp blocks theo v·ªã tr√≠ t·ª´ tr√™n xu·ªëng
    const sortedBlocks = [...blocks].sort((a, b) => a.boundingBox.top - b.boundingBox.top);
    
    // Ph√¢n t√≠ch c·∫•u tr√∫c h√≥a ƒë∆°n
    const header: TextBlock[] = [];
    const items: TextBlock[] = [];
    const summary: TextBlock[] = [];

    let currentSection = 'header';
    
    for (const block of sortedBlocks) {
      // Chuy·ªÉn sang ph·∫ßn items n·∫øu t√¨m th·∫•y d√≤ng s·∫£n ph·∫©m ƒë·∫ßu ti√™n
      if (currentSection === 'header' && this.isItemLine(block.text)) {
        currentSection = 'items';
      }
      // Chuy·ªÉn sang ph·∫ßn summary n·∫øu t√¨m th·∫•y t·ª´ kh√≥a t·ªïng ti·ªÅn
      else if (currentSection === 'items' && this.isSummaryLine(block.text)) {
        currentSection = 'summary';
      }

      // Th√™m block v√†o section t∆∞∆°ng ·ª©ng
      switch (currentSection) {
        case 'header':
          header.push(block);
          break;
        case 'items':
          items.push(block);
          break;
        case 'summary':
          summary.push(block);
          break;
      }
    }

    return { header, items, summary };
  }

  private isItemLine(text: string): boolean {
    // Ki·ªÉm tra xem d√≤ng c√≥ ph·∫£i l√† s·∫£n ph·∫©m kh√¥ng
    const itemPatterns = [
      /^\d+\s*x\s*\d+/,  // "2 x 50000"
      /\d+\s*(?:c√°i|kg|g|ml|l)\s*x\s*\d+/i,  // "2 kg x 50000"
      /^[\p{L}\s]+\s+\d+\s*x\s*\d+/u,  // "G√† ta 2 x 50000"
      /^[\p{L}\s]+\s+\d+\s*(?:c√°i|kg|g|ml|l)\s*x\s*\d+/iu  // "G√† ta 2 kg x 50000"
    ];

    return itemPatterns.some(pattern => pattern.test(text));
  }

  private isSummaryLine(text: string): boolean {
    // Ki·ªÉm tra xem d√≤ng c√≥ ph·∫£i l√† t·ªïng ti·ªÅn kh√¥ng
    const summaryPatterns = [
      /t·ªïng\s*(?:ti·ªÅn|c·ªông)/i,
      /th√†nh\s*ti·ªÅn/i,
      /total/i,
      /sum/i
    ];

    return summaryPatterns.some(pattern => pattern.test(text));
  }

  private extractItem(text: string): ReceiptItem | null {
    try {
      // C√°c pattern ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin s·∫£n ph·∫©m
      const patterns = [
        // "G√† ta 2 x 50000"
        /^([\p{L}\s]+)\s+(\d+)\s*x\s*(\d+)/u,
        // "2 x 50000 G√† ta"
        /^(\d+)\s*x\s*(\d+)\s+([\p{L}\s]+)/u,
        // "G√† ta 2kg x 50000"
        /^([\p{L}\s]+)\s+(\d+)\s*(?:c√°i|kg|g|ml|l)\s*x\s*(\d+)/iu
      ];

      for (const pattern of patterns) {
        const match = text.match(pattern);
        if (match) {
          const [_, nameOrQuantity1, quantityOrPrice, priceOrName] = match;
          
          // X√°c ƒë·ªãnh ƒë√∫ng th·ª© t·ª± c√°c th√†nh ph·∫ßn
          let name: string, quantity: number, price: number;
          
          if (/^\d+$/.test(nameOrQuantity1)) {
            // Tr∆∞·ªùng h·ª£p "2 x 50000 G√† ta"
            name = priceOrName;
            quantity = parseInt(nameOrQuantity1);
            price = parseInt(quantityOrPrice);
          } else {
            // Tr∆∞·ªùng h·ª£p "G√† ta 2 x 50000"
            name = nameOrQuantity1;
            quantity = parseInt(quantityOrPrice);
            price = parseInt(priceOrName);
          }

          return {
            name: name.trim(),
            quantity,
            unitPrice: price,
            total: quantity * price,
            confidence: this.calculateItemConfidence(text)
          };
        }
      }
    } catch (error) {
      console.error('L·ªói khi tr√≠ch xu·∫•t th√¥ng tin s·∫£n ph·∫©m:', error);
    }

    return null;
  }

  private calculateItemConfidence(text: string): number {
    // T√≠nh ƒë·ªô tin c·∫≠y cho s·∫£n ph·∫©m d·ª±a tr√™n format
    let confidence = 0.5; // ƒêi·ªÉm c∆° b·∫£n

    // C·ªông ƒëi·ªÉm n·∫øu c√≥ c√°c th√†nh ph·∫ßn chu·∫©n
    if (/^[\p{L}\s]+/.test(text)) confidence += 0.1; // C√≥ t√™n s·∫£n ph·∫©m
    if (/\d+\s*x\s*\d+/.test(text)) confidence += 0.2; // C√≥ format s·ªë l∆∞·ª£ng x ƒë∆°n gi√°
    if (/(?:c√°i|kg|g|ml|l)/.test(text)) confidence += 0.1; // C√≥ ƒë∆°n v·ªã t√≠nh
    if (/\d{4,}/.test(text)) confidence += 0.1; // C√≥ gi√° ti·ªÅn (√≠t nh·∫•t 4 ch·ªØ s·ªë)

    return Math.min(1, confidence);
  }

  private calculateLineConfidence(text: string, baseConfidence: number): number {
    // C√°c pattern ƒë·ªÉ ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa d√≤ng
    const patterns = {
      date: /\d{1,2}\/\d{1,2}\/\d{4}/,
      money: /\d+(\.\d{3})*(\s*(VND|ƒë|‚Ç´|vnd))?/i,
      quantity: /x\s*\d+|\d+\s*x/i,
      supplier: /(cty|c√¥ng\s*ty|c·ª≠a\s*h√†ng|ch|si√™u\s*th·ªã|st)/i
    };

    let patternMatches = 0;
    for (const pattern of Object.values(patterns)) {
      if (pattern.test(text)) {
        patternMatches++;
      }
    }

    // TƒÉng confidence n·∫øu d√≤ng ch·ª©a c√°c pattern mong mu·ªën
    const patternBonus = patternMatches * 0.1;
    
    // Gi·∫£m confidence n·∫øu d√≤ng qu√° ng·∫Øn ho·∫∑c ch·ª©a nhi·ªÅu k√Ω t·ª± ƒë·∫∑c bi·ªát
    const lengthPenalty = text.length < 5 ? 0.2 : 0;
    const specialCharPenalty = (text.match(/[^a-zA-Z0-9\s\u00C0-\u1EF9]/g) || []).length * 0.05;

    let confidence = baseConfidence / 100 + patternBonus - lengthPenalty - specialCharPenalty;
    
    // Gi·ªõi h·∫°n confidence trong kho·∫£ng [0, 1]
    return Math.max(0, Math.min(1, confidence));
  }

  public async processReceipt(imageBuffer: Buffer): Promise<OcrResult> {
    // Nh·∫≠n d·∫°ng text t·ª´ ·∫£nh
    const blocks = await this.extractTextFromImage(imageBuffer);
    
    // Ph√¢n t√≠ch c·∫•u tr√∫c h√≥a ƒë∆°n
    const { header, items, summary } = this.analyzeStructure(blocks);
    
    // Tr√≠ch xu·∫•t th√¥ng tin nh√† cung c·∫•p t·ª´ header
    const supplier = header.length > 0 ? header[0].text : 'Kh√¥ng x√°c ƒë·ªãnh';
    
    // Tr√≠ch xu·∫•t ng√†y th√°ng t·ª´ header
    const dateMatch = header.find(block => /\d{1,2}\/\d{1,2}\/\d{4}/.test(block.text));
    const date = dateMatch ? dateMatch.text.match(/\d{1,2}\/\d{1,2}\/\d{4}/)![0] : new Date().toLocaleDateString('vi-VN');
    
    // Tr√≠ch xu·∫•t danh s√°ch s·∫£n ph·∫©m
    const extractedItems: ReceiptItem[] = [];
    for (const block of items) {
      const item = this.extractItem(block.text);
      if (item) {
        extractedItems.push(item);
      }
    }
    
    // Tr√≠ch xu·∫•t t·ªïng ti·ªÅn t·ª´ summary
    let total = 0;
    const totalLine = summary.find(block => this.isSummaryLine(block.text));
    if (totalLine) {
      const numbers = totalLine.text.match(/\d+/g);
      if (numbers) {
        total = parseInt(numbers[numbers.length - 1]);
      }
    } else if (extractedItems.length > 0) {
      // T√≠nh t·ªïng t·ª´ c√°c s·∫£n ph·∫©m n·∫øu kh√¥ng t√¨m th·∫•y d√≤ng t·ªïng
      total = extractedItems.reduce((sum, item) => sum + item.total, 0);
    }
    
    // T√≠nh ƒë·ªô tin c·∫≠y trung b√¨nh
    const confidences = [
      header[0]?.confidence || 0,
      ...extractedItems.map(item => item.confidence),
      summary[0]?.confidence || 0
    ];
    const avgConfidence = confidences.reduce((sum, conf) => sum + conf, 0) / confidences.length;
    
    // Ki·ªÉm tra xem c√≥ c·∫ßn review kh√¥ng
    const needsReview = avgConfidence < OcrService.REVIEW_THRESHOLD || 
      extractedItems.length === 0 || 
      !total;

    return {
      supplier,
      date,
      total,
      items: extractedItems.map(item => ({
        name: item.name,
        quantity: item.quantity,
        unit_price: item.unitPrice,
        total: item.total,
        confidence: item.confidence
      })),
      confidence: avgConfidence,
      needsReview
    };
  }

  public async saveCorrections(original: OcrResult, corrected: OcrResult): Promise<void> {
    // L∆∞u correction cho supplier
    if (original.supplier !== corrected.supplier) {
      await ocrLearningService.saveCorrection({
        originalText: original.supplier,
        correctedText: corrected.supplier,
        type: 'supplier',
        confidence: corrected.confidence
      });
    }

    // L∆∞u correction cho date
    if (original.date !== corrected.date) {
      await ocrLearningService.saveCorrection({
        originalText: original.date,
        correctedText: corrected.date,
        type: 'date',
        confidence: corrected.confidence
      });
    }

    // L∆∞u correction cho total
    if (original.total !== corrected.total) {
      await ocrLearningService.saveCorrection({
        originalText: original.total.toString(),
        correctedText: corrected.total.toString(),
        type: 'total',
        confidence: corrected.confidence
      });
    }

    // L∆∞u correction cho items
    for (let i = 0; i < Math.min(original.items.length, corrected.items.length); i++) {
      const originalItem = original.items[i];
      const correctedItem = corrected.items[i];

      if (originalItem.name !== correctedItem.name) {
        await ocrLearningService.saveCorrection({
          originalText: originalItem.name,
          correctedText: correctedItem.name,
          type: 'item',
          confidence: correctedItem.confidence
        });
      }
    }
  }
}

export default new OcrService(); 