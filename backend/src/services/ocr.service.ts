import { createWorker } from 'tesseract.js';
import { OcrResult, ExtractedContent } from '../types/ocr';

class OcrService {
  private async extractTextFromImage(imageBuffer: Buffer): Promise<{
    text: string;
    confidence: number;
    contents: ExtractedContent[];
  }> {
    const startTime = Date.now();
    
    try {
      console.log('üîç B·∫Øt ƒë·∫ßu x·ª≠ l√Ω OCR v·ªõi Tesseract...');
      console.log('üìä K√≠ch th∆∞·ªõc ·∫£nh:', imageBuffer.length, 'bytes');

      // Kh·ªüi t·∫°o worker v·ªõi Tesseract.js
      console.log('üìö ƒêang kh·ªüi t·∫°o Tesseract worker...');
      const worker = await createWorker('vie+eng');

      // Nh·∫≠n d·∫°ng text
      console.log('üîç ƒêang x·ª≠ l√Ω OCR...');
      const result = await worker.recognize(imageBuffer);
      
      await worker.terminate();

      // Ph√¢n t√≠ch k·∫øt qu·∫£ th√†nh c√°c content c√≥ c·∫•u tr√∫c
      const contents: ExtractedContent[] = [];
      
      // Get text blocks from the result
      if (result.data.text) {
        // Split text into blocks by newlines and spaces
        const blocks = result.data.text.split(/[\n\s]+/).filter(Boolean);
        
        blocks.forEach((text, index) => {
          contents.push({
            text: text.trim(),
            type: this.detectContentType(text),
            confidence: result.data.confidence / 100,
            position: {
              top: index * 20, // Approximate positioning
              left: 0,
              width: text.length * 10, // Approximate width based on text length
              height: 20 // Fixed height
            }
          });
        });
      }

      const processingTime = Date.now() - startTime;

      console.log(`\n‚ú® Ho√†n th√†nh OCR:`);
      console.log(`- Text tr√≠ch xu·∫•t: ${result.data.text.substring(0, 100)}...`);
      console.log(`- ƒê·ªô tin c·∫≠y: ${result.data.confidence}%`);
      console.log(`- Th·ªùi gian x·ª≠ l√Ω: ${processingTime}ms`);
      
      return {
        text: result.data.text,
        confidence: result.data.confidence / 100,
        contents
      };
    } catch (error: any) {
      console.error('‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω OCR:', error);
      throw new Error(`L·ªói khi x·ª≠ l√Ω OCR: ${error.message || 'Unknown error'}`);
    }
  }

  private detectContentType(text: string): string {
    // Ki·ªÉm tra n·∫øu l√† s·ªë
    if (/^\d+([,.]\d+)?$/.test(text)) {
      return 'number';
    }

    // Ki·ªÉm tra n·∫øu l√† ti·ªÅn t·ªá
    if (/^\d+([,.]\d+)?\s*(ƒë|vnd|vnƒë|‚Ç´)$/i.test(text)) {
      return 'currency';
    }

    // Ki·ªÉm tra n·∫øu l√† ng√†y th√°ng
    if (/^\d{1,2}[-/]\d{1,2}[-/]\d{2,4}$/.test(text)) {
      return 'date';
    }

    // M·∫∑c ƒë·ªãnh l√† text
    return 'text';
  }

  public async processReceipt(imageBuffer: Buffer): Promise<OcrResult> {
    const startTime = Date.now();
    const { text, confidence, contents } = await this.extractTextFromImage(imageBuffer);
    
    return {
      rawText: text,
      confidence,
      contents,
      processingTime: Date.now() - startTime
    };
  }
}

export default new OcrService(); 