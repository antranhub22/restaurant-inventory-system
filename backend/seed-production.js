const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient({
  log: ['error', 'warn'],
  datasources: {
    db: {
      url: process.env.DATABASE_URL
    }
  }
});

async function main() {
  console.log('üå± Starting database seeding...');

  try {
    // Test connection first
    await prisma.$connect();
    console.log('‚úÖ Database connection successful');

    // Check if data already exists
    const existingUsers = await prisma.user.count();
    if (existingUsers > 0) {
      console.log('üìä Database already seeded - skipping');
      return;
    }

    // Clear existing data (for clean setup)
    console.log('üóëÔ∏è Clearing existing data...');
    await prisma.user.deleteMany({});
    await prisma.supplier.deleteMany({});
    await prisma.department.deleteMany({});
    await prisma.category.deleteMany({});

    // 1. Create admin user
    console.log('üë§ Creating admin user...');
    const hashedPassword = await bcrypt.hash('1234', 10);
    
    const adminUser = await prisma.user.create({
      data: {
        username: 'owner',
        email: 'owner@restaurant.com',
        passwordHash: hashedPassword,
        fullName: 'Ch·ªß Nh√† H√†ng',
        phone: '0123456789',
        role: 'owner',
        department: 'Qu·∫£n l√Ω',
        isActive: true,
        emailVerified: true,
        language: 'vi',
        timezone: 'Asia/Ho_Chi_Minh'
      }
    });

    // 2. Create basic category structure for Vietnamese restaurants
    console.log('üìÇ Creating categories...');
    const categories = await prisma.category.createMany({
      data: [
        { name: 'ƒê·ªì u·ªëng', description: 'N∆∞·ªõc gi·∫£i kh√°t, bia, r∆∞·ª£u', colorCode: '#3498db', sortOrder: 1 },
        { name: 'Th·ªãt t∆∞∆°i s·ªëng', description: 'C√°c lo·∫°i th·ªãt t∆∞∆°i s·ªëng', colorCode: '#e74c3c', sortOrder: 2 },
        { name: 'H·∫£i s·∫£n', description: 'C√°, t√¥m, cua v√† c√°c lo·∫°i h·∫£i s·∫£n', colorCode: '#2980b9', sortOrder: 3 },
        { name: 'Rau c·ªß qu·∫£', description: 'Rau xanh, c·ªß qu·∫£ c√°c lo·∫°i', colorCode: '#27ae60', sortOrder: 4 },
        { name: 'Gia v·ªã', description: 'Gia v·ªã, n∆∞·ªõc m·∫Øm, t∆∞∆°ng ·ªõt', colorCode: '#f1c40f', sortOrder: 5 },
        { name: 'Th·ª±c ph·∫©m kh√¥', description: 'G·∫°o, b√∫n, ph·ªü v√† c√°c lo·∫°i th·ª±c ph·∫©m kh√¥', colorCode: '#95a5a6', sortOrder: 6 },
        { name: 'S·ªØa & Tr·ª©ng', description: 'S·ªØa t∆∞∆°i, tr·ª©ng g√†, c√°c s·∫£n ph·∫©m t·ª´ s·ªØa', colorCode: '#f39c12', sortOrder: 7 },
        { name: 'ƒê·ªì ƒë√¥ng l·∫°nh', description: 'Th·ª±c ph·∫©m ƒë√¥ng l·∫°nh, kem', colorCode: '#85c1e9', sortOrder: 8 }
      ]
    });

    // 3. Create suppliers
    console.log('üè™ Creating suppliers...');
    const suppliers = await prisma.supplier.createMany({
      data: [
        {
          name: 'Ch·ª£ B·∫øn Th√†nh',
          contactPerson: 'Anh Minh',
          phone: '0901234567',
          email: 'chobenthanh@supplier.com',
          address: '123 L√™ L·ª£i, Qu·∫≠n 1, TP.HCM',
          notes: 'Rau c·ªß qu·∫£ t∆∞∆°i h√†ng ng√†y',
          isActive: true
        },
        {
          name: 'C√¥ng ty TNHH Th·ªãt t∆∞∆°i S√†i G√≤n',
          contactPerson: 'Ch·ªã Lan',
          phone: '0912345678',
          email: 'thittuoi@supplier.com',
          address: '456 Nguy·ªÖn Th·ªã Minh Khai, Qu·∫≠n 3, TP.HCM',
          notes: 'Th·ªãt heo, th·ªãt b√≤ ch·∫•t l∆∞·ª£ng cao',
          isActive: true
        },
        {
          name: 'Kho H·∫£i S·∫£n V≈©ng T√†u',
          contactPerson: 'Anh H·∫£i',
          phone: '0923456789',
          email: 'haisan@supplier.com',
          address: '789 Tr∆∞∆°ng C√¥ng ƒê·ªãnh, V≈©ng T√†u',
          notes: 'H·∫£i s·∫£n t∆∞∆°i s·ªëng t·ª´ V≈©ng T√†u',
          isActive: true
        }
      ]
    });

    // 4. Create departments
    console.log('üè¢ Creating departments...');
    const departments = await prisma.department.createMany({
      data: [
        { name: 'B·∫øp ch√≠nh', description: 'B·ªô ph·∫≠n ch·∫ø bi·∫øn m√≥n ch√≠nh', isActive: true },
        { name: 'B·∫øp l·∫°nh', description: 'B·ªô ph·∫≠n ch·∫ø bi·∫øn salad, tr√°ng mi·ªáng', isActive: true },
        { name: 'Qu·∫ßy bar', description: 'B·ªô ph·∫≠n pha ch·∫ø ƒë·ªì u·ªëng', isActive: true },
        { name: 'Kho', description: 'B·ªô ph·∫≠n qu·∫£n l√Ω kho h√†ng', isActive: true },
        { name: 'Qu·∫£n l√Ω', description: 'B·ªô ph·∫≠n qu·∫£n l√Ω nh√† h√†ng', isActive: true }
      ]
    });

    console.log('‚úÖ Database seeding completed successfully!');
    console.log('üéØ Login credentials:');
    console.log('   Username: owner');
    console.log('   Password: 1234');

  } catch (error) {
    console.error('‚ùå Seeding failed:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Handle script execution
if (require.main === module) {
  main()
    .then(() => {
      console.log('‚úÖ Seed script completed');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Seed script failed:', error);
      process.exit(1);
    });
}

module.exports = { main };